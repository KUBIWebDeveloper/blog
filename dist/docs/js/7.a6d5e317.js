"use strict";

webpackJsonp([7], { 35: function _(s, a, t) {
    s.exports = t(42);
  }, 42: function _(s, a, t) {
    var n = t(2)(null, t(43), null, null, null);s.exports = n.exports;
  }, 43: function _(s, a) {
    s.exports = { render: function render() {
        var s = this,
            a = s.$createElement;s._self._c;return s._m(0);
      }, staticRenderFns: [function () {
        var s = this,
            a = s.$createElement,
            t = s._self._c || a;return t("section", [t("p", [s._v('{\n"title": "Markcook!!!!",\n"tags": ["javascript", "回调函数"],\n"date": "2017-12-15",\n"desc": "Markcook, a smart and beautiful markdown editor",\n"cover": "markcook.png"\n}')]), s._v(" "), t("h2", [s._v("JAVASCRIPT中有关于回调函数的详细深入解读")]), s._v(" "), t("p", [t("strong", [s._v("at")]), s._v("(201712)")]), s._v(" "), t("h3", [s._v("什么是回调函数？")]), s._v(" "), t("blockquote", [t("p", [s._v("把一个函数当做实参值传递给函数的形参变量(或者传递给函数，通过arguments获取)，在另外一个函数中把传递的函数执行，这种机制就是回调函数机制")]), s._v(" "), t("p", [s._v("凡是在某一个函数的某一个阶段需要完成某一件事情（而这件事情是不确定的），都可以利用回调函数机制，把需要处理的事情当做值传递进来")])]), s._v(" "), t("pre", { pre: !0, attrs: { class: "hljs" } }, [t("code", { attrs: { "v-pre": "" } }, [t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v(" "), t("span", { attrs: { class: "hljs-title" } }, [s._v("fn")]), s._v("("), t("span", { attrs: { class: "hljs-params" } }, [s._v("num,callBack")]), s._v(")")]), s._v("{\n\t"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>callBack：传递进来的回调函数")]), s._v("\n\t"), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("typeof")]), s._v(" callBack==="), t("span", { attrs: { class: "hljs-string" } }, [s._v("'function'")]), s._v("?callBack():"), t("span", { attrs: { class: "hljs-literal" } }, [s._v("null")]), s._v(";\n\n\tcallBack && callBack();"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>这种方式默认就是，要不然不传递参数，传递的话参数值肯定是函数")]), s._v("\n}\n\nfn("), t("span", { attrs: { class: "hljs-number" } }, [s._v("10")]), s._v(");\nfn("), t("span", { attrs: { class: "hljs-number" } }, [s._v("20")]), s._v(","), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v("("), t("span", { attrs: { class: "hljs-params" } }), s._v(")")]), s._v("{\n\t"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>此处的匿名函数就是给callBack传递的值")]), s._v("\n});\n")])]), s._v(" "), t("blockquote", [t("p", [s._v("既然我们已经把函数作为值传递给FN了，此时在FN中我们可以尽情的操作传递的函数\n1、我们可以在FN中把回调函数执行 0~N 次\n2、我们还可以给回调函数传递参数值\n3、我们还可以把回调函数中的THIS进行修改\n4、我们还可以接收回调函数执行返回的值\n...")])]), s._v(" "), t("pre", { pre: !0, attrs: { class: "hljs" } }, [t("code", { attrs: { "v-pre": "" } }, [t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>需求:执行FN可以实现任意数求和,把求出的和传递给回调函数")]), s._v("\n"), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v(" "), t("span", { attrs: { class: "hljs-title" } }, [s._v("fn")]), s._v("("), t("span", { attrs: { class: "hljs-params" } }, [s._v("callBack")]), s._v(") ")]), s._v("{\n    "), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//->把ARG中的除第一项以外的参数值获取到,并且转变为数组（并且给数求和）")]), s._v("\n    "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("var")]), s._v(" argNumAry = "), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("Array")]), s._v(".prototype.slice.call("), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("arguments")]), s._v(", "), t("span", { attrs: { class: "hljs-number" } }, [s._v("1")]), s._v("),\n        total = "), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("eval")]), s._v("(argNumAry.join("), t("span", { attrs: { class: "hljs-string" } }, [s._v("'+'")]), s._v("));\n    "), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//->执行回调函数，把求出的和当做实参传递给回调函数，并且回调函数中的this指向")]), s._v("\n    "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("typeof")]), s._v(" callBack === "), t("span", { attrs: { class: "hljs-string" } }, [s._v("'function'")]), s._v(" ? callBack.call(fn, total) : "), t("span", { attrs: { class: "hljs-literal" } }, [s._v("null")]), s._v(";\n}\n\n"), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("var")]), s._v(" total="), t("span", { attrs: { class: "hljs-literal" } }, [s._v("null")]), s._v(";\nfn("), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v(" ("), t("span", { attrs: { class: "hljs-params" } }, [s._v("result")]), s._v(") ")]), s._v("{\n    "), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("console")]), s._v(".log(result, "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("this")]), s._v(");"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>100 FN")]), s._v("\n    total=result;\n}, "), t("span", { attrs: { class: "hljs-number" } }, [s._v("10")]), s._v(", "), t("span", { attrs: { class: "hljs-number" } }, [s._v("20")]), s._v(", "), t("span", { attrs: { class: "hljs-number" } }, [s._v("30")]), s._v(", "), t("span", { attrs: { class: "hljs-number" } }, [s._v("40")]), s._v(");\n")])]), s._v(" "), t("blockquote", [t("p", [s._v("我们之前学习的知识点中，很多方法都是依托于回调函数来完成的")])]), s._v(" "), t("pre", { pre: !0, attrs: { class: "hljs" } }, [t("code", { attrs: { "v-pre": "" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("var")]), s._v(" ary=["), t("span", { attrs: { class: "hljs-number" } }, [s._v("12")]), s._v(","), t("span", { attrs: { class: "hljs-number" } }, [s._v("23")]), s._v(","), t("span", { attrs: { class: "hljs-number" } }, [s._v("34")]), s._v("];\nary.sort("), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v("("), t("span", { attrs: { class: "hljs-params" } }, [s._v("a,b")]), s._v(")")]), s._v("{\n\t"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//->a:当前项")]), s._v("\n\t"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//->b:后一项")]), s._v("\n\t"), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("return")]), s._v(" a-b;"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//->返回一个大于零的值,a和b的位置进行交换")]), s._v("\n});\n\nary.forEach("), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v("("), t("span", { attrs: { class: "hljs-params" } }, [s._v("item,index,input")]), s._v(")")]), s._v("{\n\t"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//->item:当前遍历的这一项")]), s._v("\n\t"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//->index:当前遍历这一项的索引")]), s._v("\n\t"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//->input:原始遍历的数组")]), s._v("\n\n\t"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>FOR-EACH每当循环遍历到数组中的某一项，都会把传递的回调函数执行一次（不仅执行还把遍历的这一项的值传递给回调函数）")]), s._v("\n});\n\n"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>MAP遍历数组中的每一项,原有数组不变,返回的结果是修改后的新数组（MAP相当于FOR-EACH来说，增加了对原有项的修改）")]), s._v("\n"), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("var")]), s._v(" newAry = ary.map("), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v(" ("), t("span", { attrs: { class: "hljs-params" } }, [s._v("item,index,input")]), s._v(") ")]), s._v("{\n\t"), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("return")]), s._v(" item*"), t("span", { attrs: { class: "hljs-number" } }, [s._v("10")]), s._v(";"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>回调函数中返回的是啥，相当于把当前遍历这一项修改为啥（回调函数中不写RETURN，默认返回的是undefined）")]), s._v("\n});\n\n"), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("var")]), s._v(" str="), t("span", { attrs: { class: "hljs-string" } }, [s._v("'zhufeng2017peixun2018'")]), s._v(";\nstr=str.replace("), t("span", { attrs: { class: "hljs-regexp" } }, [s._v("/\\d+/g")]), s._v(","), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v("("), t("span", { attrs: { class: "hljs-params" } }), s._v(")")]), s._v("{\n\t"), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("return")]), s._v(" "), t("span", { attrs: { class: "hljs-string" } }, [s._v("'@'")]), s._v(";\n});\n\n...\n")])]), s._v(" "), t("h3", [s._v("回调函数中的this指向问题")]), s._v(" "), t("blockquote", [t("p", [s._v("回调函数中的this一般都是window（或者在严格模式下是undefined），原因：")]), s._v(" "), t("p", [s._v("我们一般在执行回调函数的时候，都是直接的把它执行了，没有特意指定执行主体或者使用call改变this，所以默认一般都是window")])]), s._v(" "), t("p", [t("code", { pre: !0 }, [s._v("有关定时器回调函数中this的处理")])]), s._v(" "), t("pre", { pre: !0, attrs: { class: "hljs" } }, [t("code", { attrs: { "v-pre": "" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("var")]), s._v(" obj = {"), t("span", { attrs: { class: "hljs-attr" } }, [s._v("name")]), s._v(": "), t("span", { attrs: { class: "hljs-string" } }, [s._v("'珠峰培训'")]), s._v(", "), t("span", { attrs: { class: "hljs-attr" } }, [s._v("fn")]), s._v(": fn};\n"), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v(" "), t("span", { attrs: { class: "hljs-title" } }, [s._v("fn")]), s._v("("), t("span", { attrs: { class: "hljs-params" } }), s._v(") ")]), s._v("{\n    "), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("console")]), s._v(".log("), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("this")]), s._v(");\n}\nsetTimeout(fn, "), t("span", { attrs: { class: "hljs-number" } }, [s._v("1000")]), s._v(");"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>非严格模式或者严格模式下FN中的THIS都是WINDOW")]), s._v("\nsetTimeout(fn.call(obj), "), t("span", { attrs: { class: "hljs-number" } }, [s._v("1000")]), s._v(");"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>设置定时器的时候就把FN执行了,把FN的返回结果赋值给定时器(1S后执行的是UNDEFINED)")]), s._v("\nsetTimeout(obj.fn, "), t("span", { attrs: { class: "hljs-number" } }, [s._v("1000")]), s._v(");"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>FN中的THIS还是WINDOW")]), s._v("\nsetTimeout(fn.bind(obj), "), t("span", { attrs: { class: "hljs-number" } }, [s._v("1000")]), s._v(");"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>FN中的THIS都是OBJ")]), s._v("\nsetTimeout("), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v(" ("), t("span", { attrs: { class: "hljs-params" } }), s._v(") ")]), s._v("{\n    "), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>this:window")]), s._v("\n    fn.call(obj);\n}, "), t("span", { attrs: { class: "hljs-number" } }, [s._v("1000")]), s._v(");"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>FN中的THIS都是OBJ")]), s._v("\n")])]), s._v(" "), t("p", [t("code", { pre: !0 }, [s._v("数组中方法回调函数中this指向问题")])]), s._v(" "), t("pre", { pre: !0, attrs: { class: "hljs" } }, [t("code", { attrs: { "v-pre": "" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("var")]), s._v(" obj = {"), t("span", { attrs: { class: "hljs-attr" } }, [s._v("name")]), s._v(": "), t("span", { attrs: { class: "hljs-string" } }, [s._v("'珠峰培训'")]), s._v("};\n"), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("var")]), s._v(" ary = ["), t("span", { attrs: { class: "hljs-number" } }, [s._v("12")]), s._v(", "), t("span", { attrs: { class: "hljs-number" } }, [s._v("23")]), s._v(", "), t("span", { attrs: { class: "hljs-number" } }, [s._v("34")]), s._v(", "), t("span", { attrs: { class: "hljs-number" } }, [s._v("45")]), s._v("];\nary.sort("), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v(" ("), t("span", { attrs: { class: "hljs-params" } }), s._v(") ")]), s._v("{\n    "), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("console")]), s._v(".log("), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("this")]), s._v(");"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>WINDOW(严格模式下是UNDEFINED)")]), s._v("\n});\n\nary.forEach("), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v(" ("), t("span", { attrs: { class: "hljs-params" } }), s._v(") ")]), s._v("{\n    "), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("console")]), s._v(".log("), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("this")]), s._v(");"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>WINDOW(严格模式下是UNDEFINED)")]), s._v("\n});\nary.forEach("), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v(" ("), t("span", { attrs: { class: "hljs-params" } }), s._v(") ")]), s._v("{\n    "), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("console")]), s._v(".log("), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("this")]), s._v(");"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>OBJ")]), s._v("\n}, obj);"), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//=>FOR-EACH 和 MAP 这两个内置方法,除了第一个参数是回调函数以外，第二个参数是改变回调函数中的THIS指向的 (SOME、FILTER、FIND、EVERY... 这些方法的第二个参数都是改变回调函数中THIS的)")]), s._v("\n")])]), s._v(" "), t("h3", [s._v("关于EACH循环方法的封装")]), s._v(" "), t("blockquote", [t("p", [s._v("需求：\n兼容所有的浏览器\n类似于JQ中的EACH方法，我们需要支持对数组、类数组、纯粹对象的遍历任务\n在遍历的过程中，通过回调函数返回值，来结束当前正在遍历的操作（回调函数中返回FALSE，我们应该立即结束对数组的遍历操作）")]), s._v(" "), t("p", [s._v("附加思考：\n需要支持对原有数组的修改（回调函数中的返回值，可以修改原来数组中的某一项值）")])]), s._v(" "), t("pre", { pre: !0, attrs: { class: "hljs" } }, [t("code", { attrs: { "v-pre": "" } }, [s._v("~"), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v(" ("), t("span", { attrs: { class: "hljs-params" } }), s._v(") ")]), s._v("{\n    "), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v(" "), t("span", { attrs: { class: "hljs-title" } }, [s._v("each")]), s._v("("), t("span", { attrs: { class: "hljs-params" } }, [s._v("value, callBack, context")]), s._v(") ")]), s._v("{\n        context = context || "), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("window")]), s._v(";\n        "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("var")]), s._v(" valueType = "), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("Object")]), s._v(".prototype.toString.call(value);\n\n        "), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//->如果传递的VALUE是一个纯粹的对象,我们使用FOR IN遍历")]), s._v("\n        "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("if")]), s._v(" (valueType === "), t("span", { attrs: { class: "hljs-string" } }, [s._v("'[object Object]'")]), s._v(") {\n            "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("for")]), s._v(" ("), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("var")]), s._v(" key "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("in")]), s._v(" value) {\n                "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("if")]), s._v(" (value.hasOwnProperty(key)) {\n                    "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("if")]), s._v(" ("), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("typeof")]), s._v(" callBack === "), t("span", { attrs: { class: "hljs-string" } }, [s._v("'function'")]), s._v(") {\n                        "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("var")]), s._v(" result = callBack.call(context, value[key], key);\n                        "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("if")]), s._v(" (result === "), t("span", { attrs: { class: "hljs-literal" } }, [s._v("false")]), s._v(") {\n                            "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("break")]), s._v(";\n                        }\n                    }\n                }\n            }\n            "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("return")]), s._v(";\n        }\n\n        "), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//->如果当前传递的VALUE有LENGTH属性,并且属性值是纯数字,我们就可以使用FOR循环遍历了")]), s._v("\n        "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("if")]), s._v(" (("), t("span", { attrs: { class: "hljs-string" } }, [s._v("'length'")]), s._v(" "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("in")]), s._v(" value) && !"), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("isNaN")]), s._v("(value.length)) {\n            "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("for")]), s._v(" ("), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("var")]), s._v(" i = "), t("span", { attrs: { class: "hljs-number" } }, [s._v("0")]), s._v("; i < value.length; i++) {\n                "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("if")]), s._v(" ("), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("typeof")]), s._v(" callBack === "), t("span", { attrs: { class: "hljs-string" } }, [s._v("'function'")]), s._v(") {\n                    result = callBack.call(context, value[i], i);\n                    "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("if")]), s._v(" (result === "), t("span", { attrs: { class: "hljs-literal" } }, [s._v("false")]), s._v(") {\n                        "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("break")]), s._v(";\n                    }\n                }\n            }\n            "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("return")]), s._v(";\n        }\n\n\n        "), t("span", { attrs: { class: "hljs-comment" } }, [s._v("//->传递的参数有错误的")]), s._v("\n        "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("throw")]), s._v(" "), t("span", { attrs: { class: "hljs-keyword" } }, [s._v("new")]), s._v(" "), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("TypeError")]), s._v("("), t("span", { attrs: { class: "hljs-string" } }, [s._v("'The value of the parameter you pass is not legal!'")]), s._v(");\n    }\n\n    "), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("window")]), s._v(".$each = each;\n}();\n\n$each({"), t("span", { attrs: { class: "hljs-attr" } }, [s._v("name")]), s._v(": "), t("span", { attrs: { class: "hljs-string" } }, [s._v("'珠峰培训'")]), s._v(", "), t("span", { attrs: { class: "hljs-attr" } }, [s._v("age")]), s._v(": "), t("span", { attrs: { class: "hljs-number" } }, [s._v("12")]), s._v(", "), t("span", { attrs: { class: "hljs-number" } }, [s._v("0")]), s._v(": "), t("span", { attrs: { class: "hljs-number" } }, [s._v("13")]), s._v("}, "), t("span", { attrs: { class: "hljs-function" } }, [t("span", { attrs: { class: "hljs-keyword" } }, [s._v("function")]), s._v(" ("), t("span", { attrs: { class: "hljs-params" } }, [s._v("item, index")]), s._v(") ")]), s._v("{\n    "), t("span", { attrs: { class: "hljs-built_in" } }, [s._v("console")]), s._v(".log(item, index);\n});\n")])])]);
      }] };
  } });
//# sourceMappingURL=7.a6d5e317.js.map